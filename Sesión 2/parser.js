/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,11],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,19],$V8=[1,17],$V9=[1,18],$Va=[5,8,17,19,20,21,25,29,33,35,36],$Vb=[1,34],$Vc=[1,30],$Vd=[1,28],$Ve=[1,27],$Vf=[1,29],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[5,8,11,17,19,20,21,25,26,29,32,33,34,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,54],$Vx=[1,60],$Vy=[5,8,17,19,20,21,25,29,33,35,36,37],$Vz=[5,8,11,17,19,20,21,25,26,29,32,33,34,35,36,37,38,53,54],$VA=[5,8,17,19,20,21,24,25,29,33,35,36,37],$VB=[5,8,11,17,19,20,21,25,26,29,32,33,34,35,36,37,38,42,43,47,48,49,50,51,52,53,54],$VC=[5,8,11,17,19,20,21,25,26,29,32,33,34,35,36,37,38,47,48,49,50,51,52,53,54],$VD=[5,8,11,17,19,20,21,25,26,29,32,33,34,35,36,37,38,49,50,53,54],$VE=[5,8,17,19,20,21,25,28,29,31,32,33,35,36],$VF=[5,8,17,19,20,21,25,29,31,32,33,35,36];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"LINS":4,"EOF":5,"INS":6,"\\n":7,"Rimprimir":8,"PARIZQ":9,"EXP":10,"PARDER":11,"CREAR":12,"ASIGNAR":13,"SI":14,"MIENTRAS":15,"DESDE":16,"HASTA":17,"CASOS":18,"Rromper":19,"Rcrear":20,"ID":21,"Rcomo":22,"TIPO":23,"IGUAL":24,"Rsi":25,"Rentonces":26,"BLOQUE":27,"Rsino":28,"Rseleccionar":29,"LCASOS":30,"Rninguno":31,"Rcaso":32,"Rmientras":33,"Rhacer":34,"Rfin":35,"Rdesde":36,"Rhasta":37,"Rpaso":38,"Rnumero":39,"Rcadena":40,"Rbooleano":41,"MAS":42,"MENOS":43,"POR":44,"DIV":45,"MOD":46,"MENOR":47,"MAYOR":48,"DIFERENTE":49,"IGUALADAD":50,"MAYORI":51,"MENORI":52,"AND":53,"OR":54,"NOT":55,"Cadena":56,"NUMERO":57,"TRUE":58,"FALSE":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"\\n",8:"Rimprimir",9:"PARIZQ",11:"PARDER",17:"HASTA",19:"Rromper",20:"Rcrear",21:"ID",22:"Rcomo",24:"IGUAL",25:"Rsi",26:"Rentonces",28:"Rsino",29:"Rseleccionar",31:"Rninguno",32:"Rcaso",33:"Rmientras",34:"Rhacer",35:"Rfin",36:"Rdesde",37:"Rhasta",38:"Rpaso",39:"Rnumero",40:"Rcadena",41:"Rbooleano",42:"MAS",43:"MENOS",44:"POR",45:"DIV",46:"MOD",47:"MENOR",48:"MAYOR",49:"DIFERENTE",50:"IGUALADAD",51:"MAYORI",52:"MENORI",53:"AND",54:"OR",55:"NOT",56:"Cadena",57:"NUMERO",58:"TRUE",59:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,4],[12,6],[13,3],[14,4],[14,6],[18,5],[18,3],[30,3],[30,4],[15,3],[27,3],[27,2],[16,7],[16,7],[23,1],[23,1],[23,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(JSON.stringify($$[$0-1],null,2)); EjecutarBloque($$[$0-1]) 
break;
case 2:
 this.$=$$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$=[]; this.$.push($$[$0]); 
break;
case 4:
console.log("Sintactico","Error en : '"+yytext+"'",this._$.firstline,this.$.first_column)
break;
case 5:
 this.$=Imprimir("imprimir",$$[$0-1]);
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = Romper(); 
break;
case 14:
this.$ = Crear($$[$0-2], $$[$0], null);
break;
case 15:
this.$ = Crear($$[$0-4], $$[$0-2], $$[$0]);
break;
case 16:
this.$ = Asignar($$[$0-2], $$[$0]);
break;
case 17:
 this.$ = Si($$[$0-2],$$[$0],null); 
break;
case 18:
 this.$ = Si($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 19:
 this.$=Seleccionar($$[$0-3],$$[$0-2],$$[$0]); 
break;
case 20:
 this.$=Seleccionar($$[$0-1],$$[$0],null); 
break;
case 21:
 this.$=[]; this.$.push(Caso($$[$0-1],$$[$0])); 
break;
case 22:
 this.$=$$[$0-3]; this.$.push(Caso($$[$0-1],$$[$0])); 
break;
case 23:
 this.$=new Mientras($$[$0-1], $$[$0]); 
break;
case 24:
this.$ = $$[$0-1];
break;
case 25:
this.$ = [];
break;
case 26: case 27:
 this.$ = Desde($$[$0-5], $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 28:
this.$="numero"
break;
case 29:
this.$="cadena"
break;
case 30:
this.$="bool"
break;
case 31:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"+"); 
break;
case 32:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"-"); 
break;
case 33:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"*"); 
break;
case 34:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"/"); 
break;
case 35:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"%"); 
break;
case 36:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"<"); 
break;
case 37:
 this.$=NuevaOperacion($$[$0-2],$$[$0],">"); 
break;
case 38:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"!="); 
break;
case 39:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"=="); 
break;
case 40:
 this.$=NuevaOperacion($$[$0-2],$$[$0],">="); 
break;
case 41:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"<="); 
break;
case 42:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"and"); 
break;
case 43:
 this.$=NuevaOperacion($$[$0-2],$$[$0],"or"); 
break;
case 44:
 this.$=NuevaOperacionUnario($$[$0],"not"); 
break;
case 45:
 this.$=NuevaOperacionUnario($$[$0],"umenos"); 
break;
case 46:
 this.$=nuevoSimbolo($$[$0],"cadena"); 
break;
case 47:
 this.$=nuevoSimbolo($$[$0],"ID");
break;
case 48:
 this.$=nuevoSimbolo(parseFloat($$[$0]),"numero"); 
break;
case 49:
 this.$=nuevoSimbolo(true,"bool"); 
break;
case 50:
 this.$=nuevoSimbolo(false,"bool"); 
break;
case 51:
 this.$=$$[$0-1] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,8:$V1,12:6,13:7,14:8,15:9,16:10,17:$V2,18:12,19:$V3,20:$V4,21:$V5,25:$V6,29:$V7,33:$V8,36:$V9},{1:[3]},{5:[1,20],6:21,8:$V1,12:6,13:7,14:8,15:9,16:10,17:$V2,18:12,19:$V3,20:$V4,21:$V5,25:$V6,29:$V7,33:$V8,36:$V9},o($Va,[2,3]),{7:[1,22]},{9:[1,23]},o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),{21:[1,24]},{24:[1,25]},{9:$Vb,10:26,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:35,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{12:37,13:36,20:$V4,21:$V5},{9:$Vb,10:38,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{1:[2,1]},o($Va,[2,2]),o($Va,[2,4]),{9:$Vb,10:39,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{22:[1,40]},{9:$Vb,10:41,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{26:[1,42],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{9:$Vb,10:56,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:57,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Vw,[2,46]),o($Vw,[2,47]),o($Vw,[2,48]),o($Vw,[2,49]),o($Vw,[2,50]),{9:$Vb,10:58,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{27:59,34:$Vx,42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{37:[1,61]},{37:[1,62]},{30:63,32:[1,64],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{11:[1,65],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{23:66,39:[1,67],40:[1,68],41:[1,69]},o($Vy,[2,16],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv}),{27:70,34:$Vx},{9:$Vb,10:71,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:72,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:73,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:74,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:75,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:76,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:77,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:78,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:79,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:80,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:81,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:82,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:83,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Vz,[2,44],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o($Vw,[2,45]),{11:[1,84],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},o($Va,[2,23]),{2:$V0,4:85,6:3,8:$V1,12:6,13:7,14:8,15:9,16:10,17:$V2,18:12,19:$V3,20:$V4,21:$V5,25:$V6,29:$V7,33:$V8,35:[1,86],36:$V9},{9:$Vb,10:87,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:88,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Va,[2,20],{31:[1,89],32:[1,90]}),{9:$Vb,10:91,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Va,[2,5]),o($Vy,[2,14],{24:[1,92]}),o($VA,[2,28]),o($VA,[2,29]),o($VA,[2,30]),o($Va,[2,17],{28:[1,93]}),o($VB,[2,31],{44:$Vl,45:$Vm,46:$Vn}),o($VB,[2,32],{44:$Vl,45:$Vm,46:$Vn}),o($Vw,[2,33]),o($Vw,[2,34]),o($Vw,[2,35]),o($VC,[2,36],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn}),o($VC,[2,37],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn}),o($VD,[2,38],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,51:$Vs,52:$Vt}),o($VD,[2,39],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,51:$Vs,52:$Vt}),o($VC,[2,40],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn}),o($VC,[2,41],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn}),o($Vz,[2,42],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt}),o([5,8,11,17,19,20,21,25,26,29,32,33,34,35,36,37,38,54],[2,43],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($Vw,[2,51]),{6:21,8:$V1,12:6,13:7,14:8,15:9,16:10,17:$V2,18:12,19:$V3,20:$V4,21:$V5,25:$V6,29:$V7,33:$V8,35:[1,94],36:$V9},o($VE,[2,25]),{38:[1,95],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{38:[1,96],42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{27:97,34:$Vx},{9:$Vb,10:98,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{27:99,34:$Vx,42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{9:$Vb,10:100,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{27:101,34:$Vx},o($VE,[2,24]),{9:$Vb,10:102,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},{9:$Vb,10:103,21:$Vc,43:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi},o($Va,[2,19]),{27:104,34:$Vx,42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},o($VF,[2,21]),o($Vy,[2,15],{42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv}),o($Va,[2,18]),{27:105,34:$Vx,42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},{27:106,34:$Vx,42:$Vj,43:$Vk,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv},o($VF,[2,22]),o($Va,[2,26]),o($Va,[2,27])],
defaultActions: {20:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  	// entorno
  	var tablaSimbolos = new Map();
  	//Ejecuciones
    function EjecutarBloque(LINS)
		{
        var retorno=null;
        LINS.forEach(elemento =>  
            {
                switch(elemento.TipoInstruccion)
                {
                    case "imprimir":
                      var res=Evaluar(elemento.Operacion);
                      console.log(res.Valor);
                      break;
                  	case "crear":
                    	EjecutarCrear(elemento);
                    	break;
                  	case "asignar":
                    	EjecutarAsignar(elemento);
                    	break;
                    case "hacer":
                    	EjecutarHacer(elemento);
                    	break;
                    case "si":
                      EjecutarSi(elemento);
                      break;
                    case "mientras":
                      EjecutarMientras(elemento);
                      break;
                    case "desde":
                      EjecutarDesde(elemento);
                      break;
                    case "seleccionar":
                      EjecutarSeleccionar(elemento);
                      break;
                    case "romper":
                      retorno = elemento;
                      break;
                }
            }
        )
        return retorno;
    }

    //Expresion
    const nuevoSimbolo= function(Valor,Tipo)
    {
        return {
            Valor:Valor,
            Tipo:Tipo
        }
    }
    const NuevaOperacion= function(OperandoIzq,OperandoDer,Tipo)
    {
        return {
            OperandoIzq:OperandoIzq,
            OperandoDer:OperandoDer,
            Tipo:Tipo
        }
    }
    function Evaluar(Operacion)
    {
        var Valorizq;
        var Valorder;
      //Simbolos
        switch(Operacion.Tipo)
        {
            case "bool":
                return nuevoSimbolo(Operacion.Valor,Operacion.Tipo);
            case "cadena":
                return nuevoSimbolo(Operacion.Valor,Operacion.Tipo);
            case "numero":
                return nuevoSimbolo(parseFloat(Operacion.Valor),Operacion.Tipo);
          	case "ID":
            		if(tablaSimbolos.has(Operacion.Valor))
                {
                  var valorID = tablaSimbolos.get(Operacion.Valor);
                  return nuevoSimbolo(valorID.Valor,valorID.Tipo);
                }
        }
      //Operaciones
        Valorizq=Evaluar(Operacion.OperandoIzq);
        if(Operacion.OperandoDer!=null)
        {
            Valorder=Evaluar(Operacion.OperandoDer);
        }
        switch (Operacion.Tipo) 
        {
            case "+":
                return nuevoSimbolo(Valorizq.Valor + Valorder.Valor, Valorizq.Tipo);
            case "-":
                return nuevoSimbolo(Valorizq.Valor - Valorder.Valor, Valorizq.Tipo);
            case "umenos":
                return nuevoSimbolo(0-Valorizq.Valor, Valorizq.Tipo);
            case "*":
                return nuevoSimbolo(Valorizq.Valor * Valorder.Valor, Valorizq.Tipo);
            case "/":
                return nuevoSimbolo(Valorizq.Valor / Valorder.Valor, Valorizq.Tipo);
            case "%":
                return nuevoSimbolo(Valorizq.Valor % Valorder.Valor, Valorizq.Tipo);
            case "not":
                return nuevoSimbolo(!Valorizq.Valor,"bool");
            case "and":
                return nuevoSimbolo(Valorizq.Valor && Valorder.Valor, "bool");
            case "or":
                return nuevoSimbolo(Valorizq.Valor || Valorder.Valor, "bool");
            case ">":
                return nuevoSimbolo(Valorizq.Valor > Valorder.Valor, "bool");
            case "<":
                return nuevoSimbolo(Valorizq.Valor < Valorder.Valor, "bool");
            case ">=":
                return nuevoSimbolo(Valorizq.Valor >= Valorder.Valor, "bool");
            case "<=":
                return nuevoSimbolo(Valorizq.Valor <= Valorder.Valor, "bool");
            case "==":
                return nuevoSimbolo(Valorizq.Valor == Valorder.Valor, "bool");
            case "!=":
                return nuevoSimbolo(Valorizq.Valor != Valorder.Valor, "bool");
        }
    }
    function NuevaOperacionUnario(Operando,Tipo)
		{
        return {
            OperandoIzq:Operando,
            OperandoDer:null,
            Tipo:Tipo
        }
    }
		/*------------------------------------------------------------*/
    //Imprimir
    const Imprimir=function(TipoInstruccion,Operacion)
    {
        return {
            TipoInstruccion:TipoInstruccion,
            Operacion:Operacion
        }
    }
  	//Crear
  	const Crear = function(id, tipo, expresion)
    {
    	return {
      		Id:id,
        	Tipo: tipo,
        	Expresion: expresion,
        	TipoInstruccion:"crear"
      }
    }
    
    function EjecutarCrear (crear) 
		{
      // validar si existe la variable
      if (tablaSimbolos.has(crear.Id))
      {
      	return;
      }
    		// evaluar el resultado de la expresión 
    	var valor ;	
      if (crear && crear.Expresion)
      {
          	valor = Evaluar(crear.Expresion);
    	}
      else
        {
            switch(crear.Tipo)
            {
                case "numero":
                    valor=nuevoSimbolo(0,"numero");
                    break;
                case "cadena":
                    valor=nuevoSimbolo("","cadena");
                    break;
                case "bool":
                    valor=nuevoSimbolo(false,"bool");
                    break;
            }
        }
      
      // crear objeto a insertar
      tablaSimbolos.set(crear.Id, valor);
    }
		// asignar
  	const Asignar = function(id, expresion)
    {
    	return {
      		Id:id,
        	Expresion: expresion,
        	TipoInstruccion: "asignar"
      }
    }
    
    function EjecutarAsignar (asignar) 
		{
      // validar si existe la variable
      if (!tablaSimbolos.has(asignar.Id))
      {
      	return;
      }
      
    		// evaluar el resultado de la expresión 
    	var simbolotabla = tablaSimbolos.get(asignar.Id) ;	
      var valor = Evaluar(asignar.Expresion);
    	
      // comparar los tipos
      if (simbolotabla.Tipo === valor.Tipo)
      {
    			// reasignar el valor
      		tablaSimbolos.set(asignar.Id, valor);
      }
    }
  //Romper
  const Romper = function(){
    return {
      TipoInstruccion:"romper"
    }
  }
	//Si	 
	const Si=function(Condicion,BloqueSi,BloqueElse)
  {
  		return {
      	Condicion:Condicion,
        BloqueSi:BloqueSi,
        BloqueElse:BloqueElse,
        TipoInstruccion:"si"
      }
  }
  function EjecutarSi (si)
	{
    	var res = Evaluar(si.Condicion);
  		if(res.Tipo=="bool")
      {
      	if(res.Valor)
        {
        	EjecutarBloque(si.BloqueSi);
        }
        else if(si.BloqueElse!=null)
        {
        	EjecutarBloque(si.BloqueElse);
        }
      }
  }
  //Casos
  const Caso = function(Expresion,Bloque)
  {
    return {
      Expresion:Expresion,
      Bloque:Bloque
    }
  }

  const Seleccionar = function(Expresion, LCasos, NingunoBloque)
  {
    return  {
      Expresion: Expresion,
      LCasos: LCasos,
      NingunoBloque: NingunoBloque,
      TipoInstruccion: "seleccionar"
    }
  }

  function EjecutarSeleccionar(seleccionar)
  {
    var ejecutado=false;
    for(var elemento of seleccionar.LCasos)
    {
        var condicion=Evaluar(NuevaOperacion(seleccionar.Expresion,elemento.Expresion,"=="));
        if(condicion.Tipo=="bool"){
          if(condicion.Valor || ejecutado){
            ejecutado=true;
            var res = EjecutarBloque(elemento.Bloque)
            if(res && res.TipoInstruccion=="romper"){
              break;
            }
          }
        }else{
          break
        }
    }
    if(seleccionar.NingunoBloque && !ejecutado){
      EjecutarBloque(seleccionar.NingunoBloque);
    }
    return null;
  }

	//Mientras
	const Mientras = function(Condicion, Bloque)
  {
    return {
      Condicion: Condicion,
      Bloque: Bloque,
      TipoInstruccion:"mientras"
    }
  }
  
  function EjecutarMientras(mientras)
	{
    while(true)
    {
    	var resultadoCondicion = Evaluar(mientras.Condicion)
      if(resultadoCondicion.Tipo=="bool")
      {
      	if(resultadoCondicion.Valor)
        {
        		var res=EjecutarBloque(mientras.Bloque);
        }
        else
        {
          break;
      	}
      }
    }
  }

	const Desde = function(ExpDesde, ExpHasta, ExpPaso, Bloque){
    return {
      ExpDesde: ExpDesde,
      ExpHasta: ExpHasta,
      ExpPaso: ExpPaso,
      Bloque: Bloque,
      TipoInstruccion:"desde"
    }
  }
  
  function EjecutarDesde(Desde)
  {
    //controlador de la condicion
    if( Desde.ExpDesde.TipoInstruccion == "crear" )
    {
      EjecutarCrear(Desde.ExpDesde);
    }
    else
    {
      EjecutarAsignar(Desde.ExpDesde);
    }
    //mientras no se llegue al hasta
    var paso = Evaluar(Desde.ExpPaso);
    var hasta = Evaluar(Desde.ExpHasta);
    var Simbolo=nuevoSimbolo(Desde.ExpDesde.Id,"ID")
    while(true){
      var inicio=Evaluar(Simbolo)
      if(paso.Valor > 0){
        if(inicio.Valor <= hasta.Valor){
          var res=EjecutarBloque(Desde.Bloque);
        }else{
          break;
        }  
      }
      else
      {
        if(inicio.Valor >= hasta.Valor){
          var res=EjecutarBloque(Desde.Bloque);
        }else{
          break;
        }
      }
      EjecutarAsignar(Asignar(Desde.ExpDesde.Id,NuevaOperacion(Simbolo,paso,"+")))
    }
  }
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "Rimprimir";
break;
case 5:return "Rcrear"; // declaración
break;
case 6:return "Rcomo";
break;
case 7:return "Rromper"
break;
case 8:return "Rsino";
break;
case 9:return "Rsi"; // if
break;
case 10:return "Rentonces";
break;
case 11:return "Rmientras"; // while
break;
case 12:return "Rdesde"; // ciclo for
break;
case 13:return "Rhasta";
break;
case 14:return "Rpaso";
break;
case 15:return "Rhacer";
break;
case 16:return "Rfin";
break;
case 17:return "Rseleccionar";// select case
break;
case 18:return "Rcaso";
break;
case 19:return "Rninguno";
break;
case 20:return "Rnumero";
break;
case 21:return "Rcadena";
break;
case 22:return "Rbooleano";
break;
case 23:return 'PTCOMA';
break;
case 24:return 9;
break;
case 25:return 11;
break;
case 26:return 58;
break;
case 27:return 59;
break;
case 28:return 51;
break;
case 29:return 52;
break;
case 30:return 50;
break;
case 31:return 49;
break;
case 32:return 24;
break;
case 33:return 42;
break;
case 34:return 43;
break;
case 35:return 44;
break;
case 36:return 45;
break;
case 37:return 46;
break;
case 38:return 48;
break;
case 39:return 47;
break;
case 40:return 53;
break;
case 41:return 54;
break;
case 42:return 55;
break;
case 43:return 21
break;
case 44:return 57;
break;
case 45: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 47: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 'TEMPLATE'; 
break;
case 48:return 5;
break;
case 49: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:imprimir\b)/i,/^(?:crear\b)/i,/^(?:como\b)/i,/^(?:romper\b)/i,/^(?:sino\b)/i,/^(?:si\b)/i,/^(?:entonces\b)/i,/^(?:mientras\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:paso\b)/i,/^(?:hacer\b)/i,/^(?:fin\b)/i,/^(?:seleccionar\b)/i,/^(?:caso\b)/i,/^(?:ninguno\b)/i,/^(?:numero\b)/i,/^(?:cadena\b)/i,/^(?:booleano\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:verdadero\b)/i,/^(?:falso\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:yy\b)/i,/^(?:oo\b)/i,/^(?:nel\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:`[^\n\`]*`)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}